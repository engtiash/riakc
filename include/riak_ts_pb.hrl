%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4

-ifndef(riak_ts_pb).
-define(riak_ts_pb, true).

-define(riak_ts_pb_gpb_version, "3.26.4").

-ifndef('TSRANGE_PB_H').
-define('TSRANGE_PB_H', true).
-record(tsrange,
        {field_name             :: binary(),        % = 1
         lower_bound            :: integer(),       % = 2, 32 bits
         lower_bound_inclusive  :: boolean() | 0 | 1, % = 3
         upper_bound            :: integer(),       % = 4, 32 bits
         upper_bound_inclusive  :: boolean() | 0 | 1, % = 5
         desc                   :: binary()         % = 6
        }).
-endif.

-ifndef('TSCOVERAGEENTRY_PB_H').
-define('TSCOVERAGEENTRY_PB_H', true).
-record(tscoverageentry,
        {ip                     :: binary(),        % = 1
         port                   :: non_neg_integer(), % = 2, 32 bits
         cover_context          :: binary(),        % = 3
         range                  :: #tsrange{} | undefined % = 4
        }).
-endif.

-ifndef('RPBMODFUN_PB_H').
-define('RPBMODFUN_PB_H', true).
-record(rpbmodfun,
        {module                 :: binary(),        % = 1
         function               :: binary()         % = 2
        }).
-endif.

-ifndef('RPBCOMMITHOOK_PB_H').
-define('RPBCOMMITHOOK_PB_H', true).
-record(rpbcommithook,
        {modfun                 :: #rpbmodfun{} | undefined, % = 1
         name                   :: binary() | undefined % = 2
        }).
-endif.

-ifndef('RPBBUCKETPROPS_PB_H').
-define('RPBBUCKETPROPS_PB_H', true).
-record(rpbbucketprops,
        {n_val                  :: non_neg_integer() | undefined, % = 1, 32 bits
         allow_mult             :: boolean() | 0 | 1 | undefined, % = 2
         last_write_wins        :: boolean() | 0 | 1 | undefined, % = 3
         precommit = []         :: [#rpbcommithook{}], % = 4
         has_precommit = false  :: boolean() | 0 | 1 | undefined, % = 5
         postcommit = []        :: [#rpbcommithook{}], % = 6
         has_postcommit = false :: boolean() | 0 | 1 | undefined, % = 7
         chash_keyfun           :: #rpbmodfun{} | undefined, % = 8
         linkfun                :: #rpbmodfun{} | undefined, % = 9
         old_vclock             :: non_neg_integer() | undefined, % = 10, 32 bits
         young_vclock           :: non_neg_integer() | undefined, % = 11, 32 bits
         big_vclock             :: non_neg_integer() | undefined, % = 12, 32 bits
         small_vclock           :: non_neg_integer() | undefined, % = 13, 32 bits
         pr                     :: non_neg_integer() | undefined, % = 14, 32 bits
         r                      :: non_neg_integer() | undefined, % = 15, 32 bits
         w                      :: non_neg_integer() | undefined, % = 16, 32 bits
         pw                     :: non_neg_integer() | undefined, % = 17, 32 bits
         dw                     :: non_neg_integer() | undefined, % = 18, 32 bits
         rw                     :: non_neg_integer() | undefined, % = 19, 32 bits
         basic_quorum           :: boolean() | 0 | 1 | undefined, % = 20
         notfound_ok            :: boolean() | 0 | 1 | undefined, % = 21
         backend                :: binary() | undefined, % = 22
         search                 :: boolean() | 0 | 1 | undefined, % = 23
         repl                   :: 'FALSE' | 'REALTIME' | 'FULLSYNC' | 'TRUE' | integer() | undefined, % = 24, enum RpbBucketProps.RpbReplMode
         search_index           :: binary() | undefined, % = 25
         datatype               :: binary() | undefined, % = 26
         consistent             :: boolean() | 0 | 1 | undefined, % = 27
         write_once             :: boolean() | 0 | 1 | undefined, % = 28
         hll_precision          :: non_neg_integer() | undefined, % = 29, 32 bits
         ttl                    :: non_neg_integer() | undefined % = 30, 32 bits
        }).
-endif.

-ifndef('RPBPAIR_PB_H').
-define('RPBPAIR_PB_H', true).
-record(rpbpair,
        {key                    :: binary(),        % = 1
         value                  :: binary() | undefined % = 2
        }).
-endif.

-ifndef('RPBRESETBUCKETREQ_PB_H').
-define('RPBRESETBUCKETREQ_PB_H', true).
-record(rpbresetbucketreq,
        {bucket                 :: binary(),        % = 1
         type                   :: binary() | undefined % = 2
        }).
-endif.

-ifndef('TSINTERPOLATION_PB_H').
-define('TSINTERPOLATION_PB_H', true).
-record(tsinterpolation,
        {base                   :: binary(),        % = 1
         interpolations = []    :: [#rpbpair{}]     % = 2
        }).
-endif.

-ifndef('TSCOVERAGEREQ_PB_H').
-define('TSCOVERAGEREQ_PB_H', true).
-record(tscoveragereq,
        {'query'                :: #tsinterpolation{} | undefined, % = 1
         table                  :: binary(),        % = 2
         replace_cover          :: binary() | undefined, % = 3
         unavailable_cover = [] :: [binary()]       % = 4
        }).
-endif.

-ifndef('TSCELL_PB_H').
-define('TSCELL_PB_H', true).
-record(tscell,
        {varchar_value          :: binary() | undefined, % = 1
         sint64_value           :: integer() | undefined, % = 2, 32 bits
         timestamp_value        :: integer() | undefined, % = 3, 32 bits
         boolean_value          :: boolean() | 0 | 1 | undefined, % = 4
         double_value           :: float() | integer() | infinity | '-infinity' | nan | undefined % = 5
        }).
-endif.

-ifndef('TSDELREQ_PB_H').
-define('TSDELREQ_PB_H', true).
-record(tsdelreq,
        {table                  :: binary(),        % = 1
         key = []               :: [#tscell{}],     % = 2
         vclock                 :: binary() | undefined, % = 3
         timeout                :: non_neg_integer() | undefined % = 4, 32 bits
        }).
-endif.

-ifndef('TSROW_PB_H').
-define('TSROW_PB_H', true).
-record(tsrow,
        {cells = []             :: [#tscell{}]      % = 1
        }).
-endif.

-ifndef('TSCOLUMNDESCRIPTION_PB_H').
-define('TSCOLUMNDESCRIPTION_PB_H', true).
-record(tscolumndescription,
        {name                   :: binary(),        % = 1
         type                   :: 'VARCHAR' | 'SINT64' | 'DOUBLE' | 'TIMESTAMP' | 'BOOLEAN' | 'BLOB' | integer() % = 2, enum TsColumnType
        }).
-endif.

-ifndef('TSPUTREQ_PB_H').
-define('TSPUTREQ_PB_H', true).
-record(tsputreq,
        {table                  :: binary(),        % = 1
         columns = []           :: [#tscolumndescription{}], % = 2
         rows = []              :: [#tsrow{}]       % = 3
        }).
-endif.

-ifndef('TSGETREQ_PB_H').
-define('TSGETREQ_PB_H', true).
-record(tsgetreq,
        {table                  :: binary(),        % = 1
         key = []               :: [#tscell{}],     % = 2
         timeout                :: non_neg_integer() | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('TSDELRESP_PB_H').
-define('TSDELRESP_PB_H', true).
-record(tsdelresp,
        {
        }).
-endif.

-ifndef('TSGETRESP_PB_H').
-define('TSGETRESP_PB_H', true).
-record(tsgetresp,
        {columns = []           :: [#tscolumndescription{}], % = 1
         rows = []              :: [#tsrow{}]       % = 2
        }).
-endif.

-ifndef('RPBSETBUCKETTYPEREQ_PB_H').
-define('RPBSETBUCKETTYPEREQ_PB_H', true).
-record(rpbsetbuckettypereq,
        {type                   :: binary(),        % = 1
         props                  :: #rpbbucketprops{} % = 2
        }).
-endif.

-ifndef('RPBGETBUCKETTYPEREQ_PB_H').
-define('RPBGETBUCKETTYPEREQ_PB_H', true).
-record(rpbgetbuckettypereq,
        {type                   :: binary()         % = 1
        }).
-endif.

-ifndef('TSLISTKEYSREQ_PB_H').
-define('TSLISTKEYSREQ_PB_H', true).
-record(tslistkeysreq,
        {table                  :: binary(),        % = 1
         timeout                :: non_neg_integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('RPBGETSERVERINFORESP_PB_H').
-define('RPBGETSERVERINFORESP_PB_H', true).
-record(rpbgetserverinforesp,
        {node                   :: binary() | undefined, % = 1
         server_version         :: binary() | undefined % = 2
        }).
-endif.

-ifndef('RPBSETBUCKETREQ_PB_H').
-define('RPBSETBUCKETREQ_PB_H', true).
-record(rpbsetbucketreq,
        {bucket                 :: binary(),        % = 1
         props                  :: #rpbbucketprops{}, % = 2
         type                   :: binary() | undefined % = 3
        }).
-endif.

-ifndef('RPBGETBUCKETREQ_PB_H').
-define('RPBGETBUCKETREQ_PB_H', true).
-record(rpbgetbucketreq,
        {bucket                 :: binary(),        % = 1
         type                   :: binary() | undefined % = 2
        }).
-endif.

-ifndef('TSCOVERAGERESP_PB_H').
-define('TSCOVERAGERESP_PB_H', true).
-record(tscoverageresp,
        {entries = []           :: [#tscoverageentry{}] % = 1
        }).
-endif.

-ifndef('TSQUERYRESP_PB_H').
-define('TSQUERYRESP_PB_H', true).
-record(tsqueryresp,
        {columns = []           :: [#tscolumndescription{}], % = 1
         rows = []              :: [#tsrow{}],      % = 2
         done = true            :: boolean() | 0 | 1 | undefined % = 3
        }).
-endif.

-ifndef('RPBAUTHREQ_PB_H').
-define('RPBAUTHREQ_PB_H', true).
-record(rpbauthreq,
        {user                   :: binary(),        % = 1
         password               :: binary()         % = 2
        }).
-endif.

-ifndef('TSQUERYREQ_PB_H').
-define('TSQUERYREQ_PB_H', true).
-record(tsqueryreq,
        {'query'                :: #tsinterpolation{} | undefined, % = 1
         stream = false         :: boolean() | 0 | 1 | undefined, % = 2
         cover_context          :: binary() | undefined % = 3
        }).
-endif.

-ifndef('RPBGETBUCKETRESP_PB_H').
-define('RPBGETBUCKETRESP_PB_H', true).
-record(rpbgetbucketresp,
        {props                  :: #rpbbucketprops{} % = 1
        }).
-endif.

-ifndef('RPBERRORRESP_PB_H').
-define('RPBERRORRESP_PB_H', true).
-record(rpberrorresp,
        {errmsg                 :: binary(),        % = 1
         errcode                :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-ifndef('TSLISTKEYSRESP_PB_H').
-define('TSLISTKEYSRESP_PB_H', true).
-record(tslistkeysresp,
        {keys = []              :: [#tsrow{}],      % = 1
         done                   :: boolean() | 0 | 1 | undefined % = 2
        }).
-endif.

-ifndef('TSPUTRESP_PB_H').
-define('TSPUTRESP_PB_H', true).
-record(tsputresp,
        {
        }).
-endif.

-endif.
