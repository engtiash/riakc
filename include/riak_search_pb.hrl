%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4

-ifndef(riak_search_pb).
-define(riak_search_pb, true).

-define(riak_search_pb_gpb_version, "3.26.4").

-ifndef('RPBMODFUN_PB_H').
-define('RPBMODFUN_PB_H', true).
-record(rpbmodfun,
        {module                 :: binary(),        % = 1
         function               :: binary()         % = 2
        }).
-endif.

-ifndef('RPBCOMMITHOOK_PB_H').
-define('RPBCOMMITHOOK_PB_H', true).
-record(rpbcommithook,
        {modfun                 :: #rpbmodfun{} | undefined, % = 1
         name                   :: binary() | undefined % = 2
        }).
-endif.

-ifndef('RPBBUCKETPROPS_PB_H').
-define('RPBBUCKETPROPS_PB_H', true).
-record(rpbbucketprops,
        {n_val                  :: non_neg_integer() | undefined, % = 1, 32 bits
         allow_mult             :: boolean() | 0 | 1 | undefined, % = 2
         last_write_wins        :: boolean() | 0 | 1 | undefined, % = 3
         precommit = []         :: [#rpbcommithook{}], % = 4
         has_precommit = false  :: boolean() | 0 | 1 | undefined, % = 5
         postcommit = []        :: [#rpbcommithook{}], % = 6
         has_postcommit = false :: boolean() | 0 | 1 | undefined, % = 7
         chash_keyfun           :: #rpbmodfun{} | undefined, % = 8
         linkfun                :: #rpbmodfun{} | undefined, % = 9
         old_vclock             :: non_neg_integer() | undefined, % = 10, 32 bits
         young_vclock           :: non_neg_integer() | undefined, % = 11, 32 bits
         big_vclock             :: non_neg_integer() | undefined, % = 12, 32 bits
         small_vclock           :: non_neg_integer() | undefined, % = 13, 32 bits
         pr                     :: non_neg_integer() | undefined, % = 14, 32 bits
         r                      :: non_neg_integer() | undefined, % = 15, 32 bits
         w                      :: non_neg_integer() | undefined, % = 16, 32 bits
         pw                     :: non_neg_integer() | undefined, % = 17, 32 bits
         dw                     :: non_neg_integer() | undefined, % = 18, 32 bits
         rw                     :: non_neg_integer() | undefined, % = 19, 32 bits
         basic_quorum           :: boolean() | 0 | 1 | undefined, % = 20
         notfound_ok            :: boolean() | 0 | 1 | undefined, % = 21
         backend                :: binary() | undefined, % = 22
         search                 :: boolean() | 0 | 1 | undefined, % = 23
         repl                   :: 'FALSE' | 'REALTIME' | 'FULLSYNC' | 'TRUE' | integer() | undefined, % = 24, enum RpbBucketProps.RpbReplMode
         search_index           :: binary() | undefined, % = 25
         datatype               :: binary() | undefined, % = 26
         consistent             :: boolean() | 0 | 1 | undefined, % = 27
         write_once             :: boolean() | 0 | 1 | undefined, % = 28
         hll_precision          :: non_neg_integer() | undefined, % = 29, 32 bits
         ttl                    :: non_neg_integer() | undefined % = 30, 32 bits
        }).
-endif.

-ifndef('RPBPAIR_PB_H').
-define('RPBPAIR_PB_H', true).
-record(rpbpair,
        {key                    :: binary(),        % = 1
         value                  :: binary() | undefined % = 2
        }).
-endif.

-ifndef('RPBRESETBUCKETREQ_PB_H').
-define('RPBRESETBUCKETREQ_PB_H', true).
-record(rpbresetbucketreq,
        {bucket                 :: binary(),        % = 1
         type                   :: binary() | undefined % = 2
        }).
-endif.

-ifndef('RPBSEARCHDOC_PB_H').
-define('RPBSEARCHDOC_PB_H', true).
-record(rpbsearchdoc,
        {fields = []            :: [#rpbpair{}]     % = 1
        }).
-endif.

-ifndef('RPBSETBUCKETTYPEREQ_PB_H').
-define('RPBSETBUCKETTYPEREQ_PB_H', true).
-record(rpbsetbuckettypereq,
        {type                   :: binary(),        % = 1
         props                  :: #rpbbucketprops{} % = 2
        }).
-endif.

-ifndef('RPBGETBUCKETTYPEREQ_PB_H').
-define('RPBGETBUCKETTYPEREQ_PB_H', true).
-record(rpbgetbuckettypereq,
        {type                   :: binary()         % = 1
        }).
-endif.

-ifndef('RPBGETSERVERINFORESP_PB_H').
-define('RPBGETSERVERINFORESP_PB_H', true).
-record(rpbgetserverinforesp,
        {node                   :: binary() | undefined, % = 1
         server_version         :: binary() | undefined % = 2
        }).
-endif.

-ifndef('RPBSEARCHQUERYRESP_PB_H').
-define('RPBSEARCHQUERYRESP_PB_H', true).
-record(rpbsearchqueryresp,
        {docs = []              :: [#rpbsearchdoc{}], % = 1
         max_score              :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 2
         num_found              :: non_neg_integer() | undefined % = 3, 32 bits
        }).
-endif.

-ifndef('RPBSEARCHQUERYREQ_PB_H').
-define('RPBSEARCHQUERYREQ_PB_H', true).
-record(rpbsearchqueryreq,
        {q                      :: binary(),        % = 1
         index                  :: binary(),        % = 2
         rows                   :: non_neg_integer() | undefined, % = 3, 32 bits
         start                  :: non_neg_integer() | undefined, % = 4, 32 bits
         sort                   :: binary() | undefined, % = 5
         filter                 :: binary() | undefined, % = 6
         df                     :: binary() | undefined, % = 7
         op                     :: binary() | undefined, % = 8
         fl = []                :: [binary()],      % = 9
         presort                :: binary() | undefined % = 10
        }).
-endif.

-ifndef('RPBSETBUCKETREQ_PB_H').
-define('RPBSETBUCKETREQ_PB_H', true).
-record(rpbsetbucketreq,
        {bucket                 :: binary(),        % = 1
         props                  :: #rpbbucketprops{}, % = 2
         type                   :: binary() | undefined % = 3
        }).
-endif.

-ifndef('RPBGETBUCKETREQ_PB_H').
-define('RPBGETBUCKETREQ_PB_H', true).
-record(rpbgetbucketreq,
        {bucket                 :: binary(),        % = 1
         type                   :: binary() | undefined % = 2
        }).
-endif.

-ifndef('RPBAUTHREQ_PB_H').
-define('RPBAUTHREQ_PB_H', true).
-record(rpbauthreq,
        {user                   :: binary(),        % = 1
         password               :: binary()         % = 2
        }).
-endif.

-ifndef('RPBGETBUCKETRESP_PB_H').
-define('RPBGETBUCKETRESP_PB_H', true).
-record(rpbgetbucketresp,
        {props                  :: #rpbbucketprops{} % = 1
        }).
-endif.

-ifndef('RPBERRORRESP_PB_H').
-define('RPBERRORRESP_PB_H', true).
-record(rpberrorresp,
        {errmsg                 :: binary(),        % = 1
         errcode                :: non_neg_integer() % = 2, 32 bits
        }).
-endif.

-endif.
